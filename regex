from flask import Flask, request, jsonify
import base64
import re
from PyPDF2 import PdfReader

app = Flask(__name__)

def extract_text_from_pdf(base64_string):
    # Decode base64 string into binary
    pdf_data = base64.b64decode(base64_string)
    
    # Save binary data to a temporary PDF file
    with open("temp_resume.pdf", "wb") as temp_pdf:
        temp_pdf.write(pdf_data)

    # Extract text from the PDF
    reader = PdfReader("temp_resume.pdf")
    text = ""
    for page in reader.pages:
        text += page.extract_text()
    
    return text

def extract_details_from_text(text):
    # Regular expressions for extracting details
    name_patterns = [
        r"Name:\s*([A-Za-z\s]+)", 
        r"Full Name:\s*([A-Za-z\s]+)", 
        r"\bName\b\s*:\s*([A-Za-z\s]+)"
    ]
    phone_pattern = r"(\+?\d{1,3})?[-.\s]?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}"
    email_pattern = r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
    experience_pattern = r"(\d+)\s*(years?|yrs?|Months?|mos?)\s*experience"
    company_pattern = r"(Company|Employer|Organization):\s*([A-Za-z0-9 &]+)"

    # Extract details
    name = None
    for pattern in name_patterns:
        match = re.search(pattern, text)
        if match:
            name = match.group(1).strip()
            break

    phone = re.search(phone_pattern, text)
    email = re.search(email_pattern, text)
    experience = re.search(experience_pattern, text)
    company = re.search(company_pattern, text)

    # Clean up extracted details to remove unwanted characters like newlines
    return {
        "name": name.replace("\n", " ") if name else "Not Found",
        "phone": phone.group(0).replace("\n", "") if phone else "Not Found",
        "email": email.group(0).replace("\n", "") if email else "Not Found",
        "experience": experience.group(0).replace("\n", "") if experience else "Fresher",
        "last_company": company.group(2).strip().replace("\n", "") if company else "Not Found"
    }

@app.route('/extract-details', methods=['POST'])
def extract_details():
    data = request.json

    # Check if the base64 string is provided
    if 'base64_pdf' not in data:
        return jsonify({"error": "Base64 PDF string is required"}), 400
    
    base64_pdf = data['base64_pdf']

    try:
        # Extract text from the PDF
        text = extract_text_from_pdf(base64_pdf)
        
        # Extract details from the text
        details = extract_details_from_text(text)
        
        return jsonify(details)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
